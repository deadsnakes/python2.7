diff --git a/configure b/configure
--- a/configure
+++ b/configure
@@ -1,5 +1,5 @@
 #! /bin/sh
-# From configure.in Revision: 86043 .
+# From configure.in Revision: 86076 .
 # Guess values for system-dependent variables and create Makefiles.
 # Generated by GNU Autoconf 2.65 for python 2.7.
 #
@@ -12129,39 +12129,28 @@
 if test "${ac_cv_posix_semaphores_enabled+set}" = set; then :
   $as_echo_n "(cached) " >&6
 else
-  if test "$cross_compiling" = yes; then :
   ac_cv_posix_semaphores_enabled=yes
-else
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-
-#include <unistd.h>
-#include <fcntl.h>
-#include <stdio.h>
-#include <semaphore.h>
-#include <sys/stat.h>
-
-int main(void) {
-  sem_t *a = sem_open("/autoconf", O_CREAT, S_IRUSR|S_IWUSR, 0);
-  if (a == SEM_FAILED) {
-    perror("sem_open");
-    return 1;
-  }
-  sem_close(a);
-  sem_unlink("/autoconf");
-  return 0;
-}
-
-_ACEOF
-if ac_fn_c_try_run "$LINENO"; then :
-  ac_cv_posix_semaphores_enabled=yes
-else
-  ac_cv_posix_semaphores_enabled=no
-fi
-rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
-  conftest.$ac_objext conftest.beam conftest.$ac_ext
-fi
-
+#AC_RUN_IFELSE([AC_LANG_SOURCE([[
+##include <unistd.h>
+##include <fcntl.h>
+##include <stdio.h>
+##include <semaphore.h>
+##include <sys/stat.h>
+
+#int main(void) {
+#  sem_t *a = sem_open("/autoconf", O_CREAT, S_IRUSR|S_IWUSR, 0);
+#  if (a == SEM_FAILED) {
+#    perror("sem_open");
+#    return 1;
+#  }
+#  sem_close(a);
+#  sem_unlink("/autoconf");
+#  return 0;
+#}
+#]])],
+#[ac_cv_posix_semaphores_enabled=yes],
+#[ac_cv_posix_semaphores_enabled=no],
+#[ac_cv_posix_semaphores_enabled=yes])
 
 fi
 
@@ -12180,43 +12169,32 @@
 if test "${ac_cv_broken_sem_getvalue+set}" = set; then :
   $as_echo_n "(cached) " >&6
 else
-  if test "$cross_compiling" = yes; then :
-  ac_cv_broken_sem_getvalue=yes
-else
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-
-#include <unistd.h>
-#include <fcntl.h>
-#include <stdio.h>
-#include <semaphore.h>
-#include <sys/stat.h>
-
-int main(void){
-  sem_t *a = sem_open("/autocftw", O_CREAT, S_IRUSR|S_IWUSR, 0);
-  int count;
-  int res;
-  if(a==SEM_FAILED){
-    perror("sem_open");
-    return 1;
-
-  }
-  res = sem_getvalue(a, &count);
-  sem_close(a);
-  sem_unlink("/autocftw");
-  return res==-1 ? 1 : 0;
-}
-
-_ACEOF
-if ac_fn_c_try_run "$LINENO"; then :
   ac_cv_broken_sem_getvalue=no
-else
-  ac_cv_broken_sem_getvalue=yes
-fi
-rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
-  conftest.$ac_objext conftest.beam conftest.$ac_ext
-fi
-
+#AC_RUN_IFELSE([AC_LANG_SOURCE([[
+##include <unistd.h>
+##include <fcntl.h>
+##include <stdio.h>
+##include <semaphore.h>
+##include <sys/stat.h>
+
+#int main(void){
+#  sem_t *a = sem_open("/autocftw", O_CREAT, S_IRUSR|S_IWUSR, 0);
+#  int count;
+#  int res;
+#  if(a==SEM_FAILED){
+#    perror("sem_open");
+#    return 1;
+
+#  }
+#  res = sem_getvalue(a, &count);
+#  sem_close(a);
+#  sem_unlink("/autocftw");
+#  return res==-1 ? 1 : 0;
+#}
+#]])],
+#[ac_cv_broken_sem_getvalue=no],
+#[ac_cv_broken_sem_getvalue=yes],
+#[ac_cv_broken_sem_getvalue=yes])
 
 fi
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -3589,28 +3589,28 @@
 # isn't loaded by default, so an attempt to call
 # sem_open results in a 'Signal 12' error.
 AC_MSG_CHECKING(whether POSIX semaphores are enabled)
-AC_CACHE_VAL(ac_cv_posix_semaphores_enabled,
-AC_RUN_IFELSE([AC_LANG_SOURCE([[
-#include <unistd.h>
-#include <fcntl.h>
-#include <stdio.h>
-#include <semaphore.h>
-#include <sys/stat.h>
-
-int main(void) {
-  sem_t *a = sem_open("/autoconf", O_CREAT, S_IRUSR|S_IWUSR, 0);
-  if (a == SEM_FAILED) {
-    perror("sem_open");
-    return 1;
-  }
-  sem_close(a);
-  sem_unlink("/autoconf");
-  return 0;
-}
-]])],
-[ac_cv_posix_semaphores_enabled=yes],
-[ac_cv_posix_semaphores_enabled=no],
-[ac_cv_posix_semaphores_enabled=yes])
+AC_CACHE_VAL(ac_cv_posix_semaphores_enabled,ac_cv_posix_semaphores_enabled=yes
+#AC_RUN_IFELSE([AC_LANG_SOURCE([[
+##include <unistd.h>
+##include <fcntl.h>
+##include <stdio.h>
+##include <semaphore.h>
+##include <sys/stat.h>
+
+#int main(void) {
+#  sem_t *a = sem_open("/autoconf", O_CREAT, S_IRUSR|S_IWUSR, 0);
+#  if (a == SEM_FAILED) {
+#    perror("sem_open");
+#    return 1;
+#  }
+#  sem_close(a);
+#  sem_unlink("/autoconf");
+#  return 0;
+#}
+#]])],
+#[ac_cv_posix_semaphores_enabled=yes],
+#[ac_cv_posix_semaphores_enabled=no],
+#[ac_cv_posix_semaphores_enabled=yes])
 )
 AC_MSG_RESULT($ac_cv_posix_semaphores_enabled)
 if test $ac_cv_posix_semaphores_enabled = no
@@ -3621,32 +3621,32 @@
 
 # Multiprocessing check for broken sem_getvalue
 AC_MSG_CHECKING(for broken sem_getvalue)
-AC_CACHE_VAL(ac_cv_broken_sem_getvalue,
-AC_RUN_IFELSE([AC_LANG_SOURCE([[
-#include <unistd.h>
-#include <fcntl.h>
-#include <stdio.h>
-#include <semaphore.h>
-#include <sys/stat.h>
-
-int main(void){
-  sem_t *a = sem_open("/autocftw", O_CREAT, S_IRUSR|S_IWUSR, 0);
-  int count;
-  int res;
-  if(a==SEM_FAILED){
-    perror("sem_open");
-    return 1;
-
-  }
-  res = sem_getvalue(a, &count);
-  sem_close(a);
-  sem_unlink("/autocftw");
-  return res==-1 ? 1 : 0;
-}
-]])],
-[ac_cv_broken_sem_getvalue=no],
-[ac_cv_broken_sem_getvalue=yes],
-[ac_cv_broken_sem_getvalue=yes])
+AC_CACHE_VAL(ac_cv_broken_sem_getvalue,ac_cv_broken_sem_getvalue=no
+#AC_RUN_IFELSE([AC_LANG_SOURCE([[
+##include <unistd.h>
+##include <fcntl.h>
+##include <stdio.h>
+##include <semaphore.h>
+##include <sys/stat.h>
+
+#int main(void){
+#  sem_t *a = sem_open("/autocftw", O_CREAT, S_IRUSR|S_IWUSR, 0);
+#  int count;
+#  int res;
+#  if(a==SEM_FAILED){
+#    perror("sem_open");
+#    return 1;
+
+#  }
+#  res = sem_getvalue(a, &count);
+#  sem_close(a);
+#  sem_unlink("/autocftw");
+#  return res==-1 ? 1 : 0;
+#}
+#]])],
+#[ac_cv_broken_sem_getvalue=no],
+#[ac_cv_broken_sem_getvalue=yes],
+#[ac_cv_broken_sem_getvalue=yes])
 )
 AC_MSG_RESULT($ac_cv_broken_sem_getvalue)
 if test $ac_cv_broken_sem_getvalue = yes
